// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        static Array twoToThe;
        static int q2y;
        /** Initializes the library. */
        function void init() {
            let twoToThe = Array.new(16);
            let twoToThe[0] = 1;
            let twoToThe[1] = 2;
            let twoToThe[2] = 4;
            let twoToThe[3] = 8;
            let twoToThe[4] = 16;
            let twoToThe[5] = 32;
            let twoToThe[6] = 64;
            let twoToThe[7] = 128;
            let twoToThe[8] = 256;
            let twoToThe[9] = 512;
            let twoToThe[10] = 1024;
            let twoToThe[11] = 2048;
            let twoToThe[12] = 4096;
            let twoToThe[13] = 8192;
            let twoToThe[14] = 16384;
            let twoToThe[15] = 16384 + 16384;
            return;
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if (x < 0) {
                return -x;
            }
            return x;
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum
            var int sum, i;
            let sum = 0;
            let i = 0;
            while (i < 16) {
                if (~((y & twoToThe[i]) = 0)) {
                    let sum = sum + x;
                }
                let x = x + x;
                let i = i + 1;
            }
            return sum;
        }

        function int divHelper(int x, int y) {
            var int q;
            if ((y > x) | (y < 0)) {
                return 0;
            }
            let q = Math.divHelper(x, y + y);
            if ((q & 1) = 1) {
                // Check if q is odd
                let q2y = q2y + y + y;
            }
            if ((x - q2y) < y) {
                return q + q;
            } else {
                return q + q + 1;
            }
        }
        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            var int result;
            var boolean isNegative;
            let q2y = 0;
            let isNegative = false;
            if (x < 0) {
                let x = -x;
                let isNegative = ~isNegative;
            }
            if (y < 0) {
                let y = -y;
                let isNegative = ~isNegative;
            }
            let result = Math.divHelper(x, y);
            if (isNegative) {
                return -result;
            }
            return result;
        }

        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // This should be implemented without using multiplication or division.
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y

            // var int y, j, tmp, tmpSq;
            // let y = 0;
            // let j = 7;
            // while (~(j < 0)) {
            //     let tmp = y + twoToThe[j];
            //     let tmpSq = Math.multiply(tmp, tmp);
            //     if ((~(tmpSq > x)) & (tmpSq > 0)) {
            //         let y = tmp;
            //     }
            //     let j = j - 1;
            // }
            // return y;

            var int y, j, i, sq, twoSq, sqTimesTwoSq, finalSq;
            let y = 0;
            let j = 7;
            let sq = 0;
            let twoSq = 0;
            let finalSq = 0;

            while ((j > 0) | (j = 0)) {
                let i = 0;
                let sqTimesTwoSq = y;
                while (i < (j + 1)) {
                    let sqTimesTwoSq = ^sqTimesTwoSq;
                    let i = i + 1;
                }
                let twoSq = twoToThe[j + j];
                let finalSq = sq + twoSq + sqTimesTwoSq;
                if ((finalSq > 0) & ((finalSq < x) | (finalSq = x))) {
                    let y = y + twoToThe[j];
                    let sq = finalSq;
                }
                let j = j - 1;
            }
            return y;
        }

        /** Returns the greater number. */
        function int max(int a, int b) {
            if (b > a) {
                return b;
            }
            return a;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if (b < a) {
                return b;
            }
            return a;
        }
}
