// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    	IN  	inM[16],         // M value input  (M = contents of RAM[A])
	        instruction[16], // Instruction for execution
		reset;           // Signals whether to re-start the current
                	         // program (reset==1) or continue executing
                        	 // the current program (reset==0).

	OUT 	outM[16],        // M value output
		writeM,          // Write to M? 
		addressM[15],    // Address in data memory (of M)
		pc[15];          // address of next instruction

	PARTS:
		// Differentiate between a and c commands
		DMux (in=true, sel=instruction[15], a=aComm, b=cComm);

		// A register
		And (a=cComm, b=instruction[5], out=computeComm);
		Mux16 (a=instruction, b=aluOut, sel=computeComm, out=newAStore);
		Or (a=aComm, b=computeComm, out=loadA);
		ARegister (in=newAStore, load=loadA, out=aRegister);


		// D register
		And (a=cComm, b=instruction[4], out=loadD);
		DRegister (in=aluOut, load=loadD, out=dRegister);

		// ALU
		Mux16 (a=aRegister, b=inM, sel=instruction[12], out=aOrM);
		ExtendAlu (x=dRegister, y=aOrM, instruction=instruction[6..14], out=aluOut, zr=zr, ng=ng, out=outM);
		

		// PC - jumps
		Not (in=zr, out=nzr);
		Not (in=ng, out=nng);
		And (a=nng, b=nzr, out=isPos);
		And (a=isPos, b=instruction[0], out=jgt);
		And (a=zr, b=instruction[1], out=jeq);
		And (a=ng, b=instruction[2], out=jlt);
		Or (a=jlt, b=jeq, out=jle);
		Or (a=jle, b=jgt, out=jump);
		And (a=cComm, b=jump, out=shouldJump);
		PC (in=aRegister, load=shouldJump, inc=true, reset=reset, out[0..14]=pc);

		And (a=instruction[3], b=cComm, out=writeM);
		And16(a=aRegister, b=true, out[0..14]=addressM);
}